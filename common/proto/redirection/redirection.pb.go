// Code generated by protoc-gen-go. DO NOT EDIT.
// source: redirection.proto

package redirection

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Image struct {
	Image                []byte   `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d6f58000b7a1766, []int{0}
}

func (m *Image) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Image.Unmarshal(m, b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Image.Marshal(b, m, deterministic)
}
func (m *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(m, src)
}
func (m *Image) XXX_Size() int {
	return xxx_messageInfo_Image.Size(m)
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *Image) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ImageResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageResponse) Reset()         { *m = ImageResponse{} }
func (m *ImageResponse) String() string { return proto.CompactTextString(m) }
func (*ImageResponse) ProtoMessage()    {}
func (*ImageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d6f58000b7a1766, []int{1}
}

func (m *ImageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageResponse.Unmarshal(m, b)
}
func (m *ImageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageResponse.Marshal(b, m, deterministic)
}
func (m *ImageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageResponse.Merge(m, src)
}
func (m *ImageResponse) XXX_Size() int {
	return xxx_messageInfo_ImageResponse.Size(m)
}
func (m *ImageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImageResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Image)(nil), "Image")
	proto.RegisterType((*ImageResponse)(nil), "ImageResponse")
}

func init() { proto.RegisterFile("redirection.proto", fileDescriptor_9d6f58000b7a1766) }

var fileDescriptor_9d6f58000b7a1766 = []byte{
	// 135 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x4a, 0x4d, 0xc9,
	0x2c, 0x4a, 0x4d, 0x2e, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x32, 0xe7,
	0x62, 0xf5, 0xcc, 0x4d, 0x4c, 0x4f, 0x15, 0x12, 0xe1, 0x62, 0xcd, 0x04, 0x31, 0x24, 0x18, 0x15,
	0x18, 0x35, 0x78, 0x82, 0x20, 0x1c, 0x21, 0x09, 0x2e, 0xf6, 0xdc, 0xd4, 0xe2, 0x62, 0x90, 0x38,
	0x93, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x8c, 0xab, 0xc4, 0xcf, 0xc5, 0x0b, 0xd6, 0x18, 0x94, 0x5a,
	0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x6a, 0x64, 0xc6, 0xc5, 0x1d, 0x84, 0x30, 0x5e, 0x48, 0x9d, 0x8b,
	0x1b, 0x2c, 0xef, 0x91, 0x98, 0x97, 0x92, 0x93, 0x2a, 0xc4, 0xa6, 0x07, 0xe6, 0x49, 0xf1, 0xe9,
	0xa1, 0xe8, 0x52, 0x62, 0x48, 0x62, 0x03, 0x3b, 0xc4, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x95,
	0x9d, 0xb7, 0xc6, 0x9d, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RedirectionClient is the client API for Redirection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RedirectionClient interface {
	//    rpc ImageHandle (Image) returns (null) {}
	ImageHandle(ctx context.Context, in *Image, opts ...grpc.CallOption) (*ImageResponse, error)
}

type redirectionClient struct {
	cc grpc.ClientConnInterface
}

func NewRedirectionClient(cc grpc.ClientConnInterface) RedirectionClient {
	return &redirectionClient{cc}
}

func (c *redirectionClient) ImageHandle(ctx context.Context, in *Image, opts ...grpc.CallOption) (*ImageResponse, error) {
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, "/Redirection/ImageHandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedirectionServer is the server API for Redirection service.
type RedirectionServer interface {
	//    rpc ImageHandle (Image) returns (null) {}
	ImageHandle(context.Context, *Image) (*ImageResponse, error)
}

// UnimplementedRedirectionServer can be embedded to have forward compatible implementations.
type UnimplementedRedirectionServer struct {
}

func (*UnimplementedRedirectionServer) ImageHandle(ctx context.Context, req *Image) (*ImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageHandle not implemented")
}

func RegisterRedirectionServer(s *grpc.Server, srv RedirectionServer) {
	s.RegisterService(&_Redirection_serviceDesc, srv)
}

func _Redirection_ImageHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Image)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedirectionServer).ImageHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Redirection/ImageHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedirectionServer).ImageHandle(ctx, req.(*Image))
	}
	return interceptor(ctx, in, info, handler)
}

var _Redirection_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Redirection",
	HandlerType: (*RedirectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImageHandle",
			Handler:    _Redirection_ImageHandle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redirection.proto",
}
